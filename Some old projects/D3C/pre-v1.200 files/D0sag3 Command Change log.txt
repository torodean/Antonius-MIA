DDDDDD     000000    SSSSSS   AAAAAA    GGGGGGG  333333
DD   DD   00    00  SS       AA    AA  GG             33
DD    DD  00    00  SS       AA    AA  GG             33
DD     D  00    00   SSSSS   AAAAAAAA  GG   GG     3333
DD    DD  00    00       SS  AA    AA  GG    GG       33
DD   DD   00    00       SS  AA    AA  GG    GG       33
DDDDDD     000000   SSSSSS   AA    AA   GGGGGG   333333

//====================================================\\
||================== D0SAG3 COMMAND ==================||
||==================== CHANGE LOG ====================||
\\====================================================//


//=============================\\
||===== Pre-Version 1.000 =====||
\\=============================//


//==ADDED COMMANDS==\\

add : Adds two positive integers of any length.
crypt : Encrypts any string.
deCrypt : Decrypts any string.
help: gives the user a list of possible functions to input into the command interface for further instructions.
mutiply : Multiplies two positive or negative integers of any length.
exit : Terminates the program.

\\==ADDED COMMANDS==//

***NOTE***
This change log was not created until version 1.016 of the D0sag3 Command program. All changes between 1.000 and 1.015 are below under the version 1.015 log. Once I finished creating the crypt/decrypt program as well as the interface, the program was made version 1.000. The plan is to have a GUI version available come the release of version 2.000. This is still far away and for now as many functions as can will be programmed in.
***NOTE***

//=============================\\
||======= Version 1.015 =======||
\\=============================//

//==ADDED COMMANDS==\\

convert : Converts units to other units. (only mass conversions programmed so far)
help-extended : Gives the user a list of extended commands that are not as commonly used.
kinematics : Solves for unknowns using kinematic equations. (only 1 dimensional programmed)
number of factors : Returns the number of factors within an integer.
prime : Determines if a positive integer is prime or not.
palindrome : Determines if a positive integer is palindrome.
subtract : subtracts two positive integers of any length. (Still buggy for some problems)
sum of digits : Returns the sum of the digits within a number.
triangle number : Determines if a number is a triangle number or not.
Conversations : A file created to give a reply to some random inputs was created. Some of the random inputs already programmed include "hello", "What's up?", and "idiot". More will be added throughout the later versions

\\==ADDED COMMANDS==//

//=============================\\
||======= Version 1.016 =======||
\\=============================//

//==ADDED COMMANDS==\\

prime n : Calculates the n'th prime number up to a maximum number of 2147483647.
prime n populate : Creates a file of all prime numbers up to a maximum number of 2147483647.
prime n erase: Clears the file created by 'prime n populate'.

\\==ADDED COMMANDS==//

//==NOTES==\\

The file that is populated by 'prime n populate' is titled "PrimeNumberList.txt" located in the same directory as the "src" folder.
The function was also created so that it can be stopped at any time and the next time it will run it picks up right where it left off. This program is mainly created to increase the efficiency of the 'prime n' function, but that will be integrated later.

\\==NOTES==//

//=============================\\
||======= Version 1.017 =======||
\\=============================//


//==ADDED COMMANDS==\\

prime factors : Determines all of the prime factors of a positive integer.
consecutive digit product : Finds the largest product of x consecutive numbers in a positive integer of any length.
collatz : Produces a collatz sequence based on a starting integer that hte user inputs.
lattice paths : Determines the amount of lattice paths to the bottom right corner of a square grid of size [x][y]

\\==ADDED COMMANDS==//

//==NOTES==\\

\\==NOTES==//

//=============================\\
||======= Version 1.100 =======||
\\=============================//

//==NOTES==\\

A GUI implementation was initiated. Many functions have not yet been added, but some have been transformed into a gui version as well as an advanced gui promopt to display many other functions that have not yet been turned into a gui.

\\==NOTES==//



























